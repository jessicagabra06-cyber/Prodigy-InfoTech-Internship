# -*- coding: utf-8 -*-
"""Getting_started_with_google_colab_ai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/googlecolab/colabtools/blob/main/notebooks/Getting_started_with_google_colab_ai.ipynb

Colab is making it easier than ever to integrate powerful Generative AI capabilities into your projects. We are launching public preview for a simple and intuitive Python library (google.colab.ai) to access state-of-the-art language models directly within Pro and Pro+ subscriber Colab environments.  This means subscribers can spend less time on configuration and set up and more time bringing their ideas to life. With just a few lines of code, you can now perform a variety of tasks:
- Generate text
- Translate languages
- Write creative content
- Categorize text

Happy Coding!


[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/googlecolab/colabtools/blob/main/notebooks/Getting_started_with_google_colab_ai.ipynb)
"""

##Task03: Decision Tree Classifier

##step1:Dataset:bank.csv

#import required libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

##step2:upload dataset
url='https://raw.githubusercontent.com/Prodigy-InfoTech/data-science-datasets/main/Task%203/bank/bank.csv'
df=pd.read_csv(url, sep=';')
df.head()

#step3
print(df.head())
print(df.info())
print(df['y'].value_counts) #to count how many yes and no in target column

#step 4 convert categorical columns into numbers
data_encoded=pd.get_dummies(df,drop_first=True)

#step 5 split into features (x) and target (y)
X=data_encoded.drop('y_yes',axis=1) #features =everything except target
y=data_encoded['y_yes'] #target= whether customer purchased (yes=1, no=0)

#step 6 Train-test split(70%training, 30% testing)
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)

#step 7 Train the decision tree
model = DecisionTreeClassifier(max_depth=5,random_state=42)
model.fit(X_train,y_train)

#step8 predications
y_pred= model.predict(X_test)

#step 9 Evaluate Preformance
print("Accuracy:",accuracy_score(y_test,y_pred))
print("Classification Report:/n",classification_report(y_test,y_pred))

#step10 Confusion matrix(Visualization)
cm= confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt='d',cmap='Blues',xticklabels=['No','Yes'],yticklabels=['No','Yes'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

#Step 11:Plot the Decision tree
plt.figure(figsize=(80,50))
plot_tree(model,feature_names=X.columns,class_names=['No','Yes'],filled=True)
plt.show()


















